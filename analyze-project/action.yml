name: Analyze project
description: >
  This workflow analyzes the code quality of a Python project using various
  linters and type checkers including ni-python-styleguide,
  mypy (if the 'mypy' package is installed), and pyright (if the 'pyright'
  package is installed).

inputs:
  project-directory:
    description: Path to the directory containing pyproject.toml.
    default: ${{ github.workspace }}
  extras:
    # E.g. "docs drivers"
    description: 'List of Poetry extras to install (separated by spaces)'
    default: ''
    required: false
    type: string

runs:
  using: composite
  steps:
    - name: Get project info
      id: get_project_info
      run: |
        result=$(poetry version)
        name=$(echo "$result" | awk '{print $1}')
        version=$(echo "$result" | awk '{print $2}')
        echo "Name: $name"
        echo "Version: $version"
        echo "name=$name" >> "$GITHUB_OUTPUT"
        echo "version=$version" >> "$GITHUB_OUTPUT"
        poetry env activate
        venv_path="$(poetry env info --path)"
        echo "venv path: $venv_path"
        echo "venv-path=$venv_path" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ inputs.project-directory }}
    - name: Check for lock changes
      run: poetry check --lock -C "${{ inputs.project-directory }}"
      shell: bash
    - name: Cache virtualenv
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: ${{ steps.get_project_info.outputs.venv-path }}
        key: ${{ steps.get_project_info.outputs.name }}-${{ runner.os }}-py${{ env.pythonVersion }}-${{ hashFiles(format('{0}/poetry.lock', inputs.project-directory)) }}
    - name: Install ${{ steps.get_project_info.outputs.name }}
      run: |
        if [ -n "${{ inputs.extras }}" ]; then
          poetry install -v --extras '${{ inputs.extras }}'
        else
          poetry install -v
        fi
      working-directory: ${{ inputs.project-directory }}
      shell: bash
    - name: Lint
      run: poetry run ni-python-styleguide lint
      working-directory: ${{ inputs.project-directory }}
      shell: bash
    - name: Check for mypy and pyright installation
      id: check_tools
      run: |
        import os
        from importlib.metadata import version, PackageNotFoundError

        def is_installed(pkg_name):
            try:
                version(pkg_name)
                return "true"
            except PackageNotFoundError:
                return "false"

        with open(os.environ["GITHUB_OUTPUT"], "a") as output:
            print(f"mypy={is_installed('mypy')}", file=output)
            print(f"pyright={is_installed('pyright')}", file=output)
      working-directory: ${{ inputs.project-directory }}
      shell: poetry run python {0}
    - name: Echo check_tools outputs
      run: |
        echo "mypy installed: ${{ steps.check_tools.outputs.mypy }}"
        echo "pyright installed: ${{ steps.check_tools.outputs.pyright }}"
      shell: bash
    - name: Mypy static analysis
      if: steps.check_tools.outputs.mypy == 'true'
      run: poetry run mypy
      working-directory: ${{ inputs.project-directory }}
      shell: bash
    - name: Add virtualenv to the path for pyright-action
      if: steps.check_tools.outputs.pyright == 'true'
      shell: bash
      run: |
        echo "$(dirname $(poetry env info --executable))" >> $GITHUB_PATH
      working-directory: ${{ inputs.project-directory }}
    - name: Pyright static analysis
      if: steps.check_tools.outputs.pyright == 'true'
      uses: jakebailey/pyright-action@6cabc0f01c4994be48fd45cd9dbacdd6e1ee6e5e # v2.3.3
      with:
        version: PATH
        working-directory: ${{ inputs.project-directory }}